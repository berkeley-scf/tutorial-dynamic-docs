[
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "License",
    "section": "",
    "text": "This work is licensed under a Creative Commons Attribution 4.0 International License.",
    "crumbs": [
      "License"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Creating Dynamic Documents",
    "section": "",
    "text": "This tutorial covers the basics of creating documents that combine code chunks, mathematical notation, graphics, and text. We’ll cover R, Python, Julia and bash shell chunks in the context of documents written with Quarto, R Markdown, LaTeX, and Jupyter notebooks.\nYou might also consider using MyST.\nFor this tutorial you’ll need to install the following software, though individual parts of the tutorial only need some of the software.\n\nQuarto\nR (and optionally RStudio).\n\nThe rmarkdown and knitr packages for R.\n\nA LaTeX distribution:\n\nThis is probably most easily obtained by running install_tinytex(), available from the R tinytex package\nAlternatively, an installation such as MacTex (Mac) or MiKTeX (Windows).\n\nPython and Jupyter\n\nDepartment and university servers that you may have access to may also have some or all of this software already installed.\nThis tutorial assumes basic familiarity with LaTeX syntax (most simply just with some basic math syntax).\nYou should be able to follow the tutorial on any of MacOS, Windows or Linux.\nMaterials for this tutorial, in particular the demonstration input files in various formats, are available from the underlying GitHub repository via the icon in the upper left.\n\n\n\n\n\n\nTip\n\n\n\nAs of February 2025, the website for this tutorial was developed using Quarto, with the input files being (primarily) .qmd files.\n\n\n\n\n\nIn the following sections, we’ll point to example source files in each of the formats covered in this tutorial, and we’ll show how to create PDF and HTML files from each source document. Each example file covers the same material, showing basic use of equations and code chunks in R, Python, and bash. In addition, there are tips on formatting code to avoid output that exceeds the width of a page, which is a common problem when generating PDFs.\nIn general, processing the input file to create an output file (usually called rendering) involves evaluating the code chunks and creating an intermediate document in which the results of the evaluation are written out. When rendering to HTML the intermediate format is standard Markdown and when rendering to PDF it is LaTeX. Then the final step is to create the output in the usual way from the intermediate document (e.g., pandoc for Markdown and pdflatex for LaTeX). Note that these steps take place behind the scenes without you needing to know the details.\nAs a specific example, demo.html and demo.pdf show the final output, after “rendering” the input document (specifically in this case from the .qmd input, but output from the other input formats looks essentially the same).\n\n\n\nQuarto is a relatively recent project meant to extend R Markdown to a more general purpose system that doesn’t focus on R and that also works with Jupyter notebooks. You can create qmd files that use the same syntax as R Markdown (Rmd) files or that use slightly modified syntax defined specifically for Quarto.\nYou can see Quarto’s syntax in demo.qmd. demo.html and demo.pdf show how it looks as a final output file, after rendering the input qmd document.\nQuarto allows you to easily render output files from qmd, R Markdown, Markdown, and Jupyter notebook files.\nYou can also convert qmd files to Jupyter notebooks, using quarto convert file.qmd. This is nice if you like to do your work in notebooks (though RStudio also has a visual mode that behaves somewhat similarly).\n\n\nIf only Python chunks or only bash chunks are used, Quarto will use the jupyter engine to render the chunks. For bash chunks to be processed you’ll need the Jupyter bash kernel installed. If you don’t want to install the bash kernel, you can request the knitr engine as discussed below.\nOtherwise (if using R chunks or if there are chunks from multiple languages), quarto will use the knitr engine to run the chunks, which requires you to have R and the knitr R package installed. For Python chunks, this will use the reticulate R package behind the scenes to run Python code.\nYou can specify the engine by adding information to the YAML configuration information at the top of the qmd file, e.g., as follows to use the knitr engine:\nengine: knitr\nOne benefit of using the knitr engine is that output from a chunk is interleaved with the code of the chunk, whereas with the jupyter engine (as with a Jupyter notebook), all output from a chunk appears after the entire code chunk is displayed.\n\n\n\nHere are a few approaches you can use to interactively develop your documents.\n\nText editor + quarto preview: The most basic approach is to use your favorite text editor and run quarto preview file.qmd from the command line (including Windows cmd.exe or PowerShell). Assuming that you’ve done an initial rendering of the document, this will display the output in a browser window and update the output any time you save the qmd file.\nVS Code: You can use VS Code with the Quarto extension. (If using Python chunks, you will probably also need the Python and Jupyter extensions). The extension will provide a “Run chunk” option above each chunk, and you can run individual lines using Shift+Enter (this may vary by operating system). You can also render from within VS Code and you’ll see the results displayed in a pane within VS Code. Note that with Python chunks, you may need to choose the Python interpreter that you want used - you can do this from the command pallette with “Python: select interpreter” or by clicking on the icon that shows the current Python interpreter.\nRStudio: You can use RStudio to interact with qmd files in the same fashion as with Rmd files. You can run chunks or individual lines of code easily and render easily using the Render button.\n\n\n\n\n\nR Markdown is a variant on the Markdown markup language that allows you to embed code chunks that are evaluated before creating the final output, unlike standard static code chunks in Markdown that are not evaluated. R Markdown files are simple text files.\nIn demo-Rmd.Rmd, you’ll see examples of embedding R, Python, and bash code chunks, as well as the syntax involved in creating PDF, HTML, and Word output files. demo-Rmd.html and demo-Rmd.pdf show how it looks as a final output file, after “rendering” the input Rmd document.\n\n\n\nknitr is an R package that allows you to process LaTeX files that contain code chunks. The code chunks can be in one of two formats, either a format introduced by knitr (with extension .Rtex) or traditional Sweave format (with extension .Rnw). Files in either format are simple text files. I recommend the Rtex format.\ndemo.Rtex and demo.Rnw are examples of these formats, with examples of embedding R, Python, and bash code chunks. In both demo.Rnw and demo.Rtex you’ll also see the syntax for creating PDF output files.\n\n\nOverleaf allows you to use either Rtex or Rnw style code chunk formatting within a LaTeX document (but note that documentation only shows the Rnw format).\nStrangely, regardless of which format you use, you need to have your document name end in the .Rtex extension for the code chunks to be interpreted as code.\n\n\n\n\nYou can embed code chunks in the Sweave (Rnw) format in LyX files and then process the file using knitr to create PDF output. demo.lyx provides an example, including the syntax for creating PDF output files. To use LyX, you’ll need to start the LyX application and open an existing or create a new LyX file.\n\n\n\nProject Jupyter grew out of the IPython Notebook project and provides a general way of embedding code chunks, using a variety of languages (not just Python), within a document (called a notebook) where the text components of the document is written in Markdown. Basically a document is a sequence of chunks, where each chunk is either a code chunk or a Markdown (text) chunk. The Markdown text can of course include mathematical notation using LaTeX syntax.\nTo work with a Jupyter notebook, you start Jupyter by running jupyter notebook from the UNIX command line. This will open up a Jupyter interface in a browser window. From there, you can navigate to and open your notebook file (which will end in extension .ipynb). You can choose the kernel (i.e., the language for the code chunks – Python, R, etc.) by selecting Kernel -&gt; Change Kernel or by selecting the kernel you want when opening a new notebook. Note that unlike with Quarto, a single file can only use a single kernel, so you can’t mix cells that use different languages.\nYou may have web-based access to Jupyter notebooks via services such as JupyterHub and Open OnDemand (e.g., on the UC Berkeley Savio campus cluster or through the UC Berkeley Statistical Computing Facility or the UC Berkeley DataHub). In that case you logon via a web browser and then start and interact with your notebook in the browser.\nThe Jupyter files have some similarities to demo.qmd and demo-Rmd.Rmd as both Quarto/R Markdown and Jupyter rely on Markdown as the format for text input. However, they handle code chunks somewhat differently.\nYou can insert code chunks in a different language using the %% magic syntax, as shown in demo-python.ipynb. We also have specific demo files for bash and R: demo-bash.ipynb and demo-R.ipynb. All include instructions for generating HTML output.\nYou can convert Jupyter notebooks to Quarto qmd format:\nquarto convert demo-python.ipynb\nThis is nice in part because qmd (like Rmd) is more easily handled by version control and with shell commands than the JSON format of .ipynb files.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "index.html#this-tutorial",
    "href": "index.html#this-tutorial",
    "title": "Creating Dynamic Documents",
    "section": "",
    "text": "This tutorial covers the basics of creating documents that combine code chunks, mathematical notation, graphics, and text. We’ll cover R, Python, Julia and bash shell chunks in the context of documents written with Quarto, R Markdown, LaTeX, and Jupyter notebooks.\nYou might also consider using MyST.\nFor this tutorial you’ll need to install the following software, though individual parts of the tutorial only need some of the software.\n\nQuarto\nR (and optionally RStudio).\n\nThe rmarkdown and knitr packages for R.\n\nA LaTeX distribution:\n\nThis is probably most easily obtained by running install_tinytex(), available from the R tinytex package\nAlternatively, an installation such as MacTex (Mac) or MiKTeX (Windows).\n\nPython and Jupyter\n\nDepartment and university servers that you may have access to may also have some or all of this software already installed.\nThis tutorial assumes basic familiarity with LaTeX syntax (most simply just with some basic math syntax).\nYou should be able to follow the tutorial on any of MacOS, Windows or Linux.\nMaterials for this tutorial, in particular the demonstration input files in various formats, are available from the underlying GitHub repository via the icon in the upper left.\n\n\n\n\n\n\nTip\n\n\n\nAs of February 2025, the website for this tutorial was developed using Quarto, with the input files being (primarily) .qmd files.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "Creating Dynamic Documents",
    "section": "",
    "text": "In the following sections, we’ll point to example source files in each of the formats covered in this tutorial, and we’ll show how to create PDF and HTML files from each source document. Each example file covers the same material, showing basic use of equations and code chunks in R, Python, and bash. In addition, there are tips on formatting code to avoid output that exceeds the width of a page, which is a common problem when generating PDFs.\nIn general, processing the input file to create an output file (usually called rendering) involves evaluating the code chunks and creating an intermediate document in which the results of the evaluation are written out. When rendering to HTML the intermediate format is standard Markdown and when rendering to PDF it is LaTeX. Then the final step is to create the output in the usual way from the intermediate document (e.g., pandoc for Markdown and pdflatex for LaTeX). Note that these steps take place behind the scenes without you needing to know the details.\nAs a specific example, demo.html and demo.pdf show the final output, after “rendering” the input document (specifically in this case from the .qmd input, but output from the other input formats looks essentially the same).",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "index.html#quarto-and-qmd-files",
    "href": "index.html#quarto-and-qmd-files",
    "title": "Creating Dynamic Documents",
    "section": "",
    "text": "Quarto is a relatively recent project meant to extend R Markdown to a more general purpose system that doesn’t focus on R and that also works with Jupyter notebooks. You can create qmd files that use the same syntax as R Markdown (Rmd) files or that use slightly modified syntax defined specifically for Quarto.\nYou can see Quarto’s syntax in demo.qmd. demo.html and demo.pdf show how it looks as a final output file, after rendering the input qmd document.\nQuarto allows you to easily render output files from qmd, R Markdown, Markdown, and Jupyter notebook files.\nYou can also convert qmd files to Jupyter notebooks, using quarto convert file.qmd. This is nice if you like to do your work in notebooks (though RStudio also has a visual mode that behaves somewhat similarly).\n\n\nIf only Python chunks or only bash chunks are used, Quarto will use the jupyter engine to render the chunks. For bash chunks to be processed you’ll need the Jupyter bash kernel installed. If you don’t want to install the bash kernel, you can request the knitr engine as discussed below.\nOtherwise (if using R chunks or if there are chunks from multiple languages), quarto will use the knitr engine to run the chunks, which requires you to have R and the knitr R package installed. For Python chunks, this will use the reticulate R package behind the scenes to run Python code.\nYou can specify the engine by adding information to the YAML configuration information at the top of the qmd file, e.g., as follows to use the knitr engine:\nengine: knitr\nOne benefit of using the knitr engine is that output from a chunk is interleaved with the code of the chunk, whereas with the jupyter engine (as with a Jupyter notebook), all output from a chunk appears after the entire code chunk is displayed.\n\n\n\nHere are a few approaches you can use to interactively develop your documents.\n\nText editor + quarto preview: The most basic approach is to use your favorite text editor and run quarto preview file.qmd from the command line (including Windows cmd.exe or PowerShell). Assuming that you’ve done an initial rendering of the document, this will display the output in a browser window and update the output any time you save the qmd file.\nVS Code: You can use VS Code with the Quarto extension. (If using Python chunks, you will probably also need the Python and Jupyter extensions). The extension will provide a “Run chunk” option above each chunk, and you can run individual lines using Shift+Enter (this may vary by operating system). You can also render from within VS Code and you’ll see the results displayed in a pane within VS Code. Note that with Python chunks, you may need to choose the Python interpreter that you want used - you can do this from the command pallette with “Python: select interpreter” or by clicking on the icon that shows the current Python interpreter.\nRStudio: You can use RStudio to interact with qmd files in the same fashion as with Rmd files. You can run chunks or individual lines of code easily and render easily using the Render button.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "index.html#r-markdown",
    "href": "index.html#r-markdown",
    "title": "Creating Dynamic Documents",
    "section": "",
    "text": "R Markdown is a variant on the Markdown markup language that allows you to embed code chunks that are evaluated before creating the final output, unlike standard static code chunks in Markdown that are not evaluated. R Markdown files are simple text files.\nIn demo-Rmd.Rmd, you’ll see examples of embedding R, Python, and bash code chunks, as well as the syntax involved in creating PDF, HTML, and Word output files. demo-Rmd.html and demo-Rmd.pdf show how it looks as a final output file, after “rendering” the input Rmd document.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "index.html#latex-plus-knitr",
    "href": "index.html#latex-plus-knitr",
    "title": "Creating Dynamic Documents",
    "section": "",
    "text": "knitr is an R package that allows you to process LaTeX files that contain code chunks. The code chunks can be in one of two formats, either a format introduced by knitr (with extension .Rtex) or traditional Sweave format (with extension .Rnw). Files in either format are simple text files. I recommend the Rtex format.\ndemo.Rtex and demo.Rnw are examples of these formats, with examples of embedding R, Python, and bash code chunks. In both demo.Rnw and demo.Rtex you’ll also see the syntax for creating PDF output files.\n\n\nOverleaf allows you to use either Rtex or Rnw style code chunk formatting within a LaTeX document (but note that documentation only shows the Rnw format).\nStrangely, regardless of which format you use, you need to have your document name end in the .Rtex extension for the code chunks to be interpreted as code.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "index.html#lyx-plus-knitr",
    "href": "index.html#lyx-plus-knitr",
    "title": "Creating Dynamic Documents",
    "section": "",
    "text": "You can embed code chunks in the Sweave (Rnw) format in LyX files and then process the file using knitr to create PDF output. demo.lyx provides an example, including the syntax for creating PDF output files. To use LyX, you’ll need to start the LyX application and open an existing or create a new LyX file.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "index.html#jupyter-notebooks",
    "href": "index.html#jupyter-notebooks",
    "title": "Creating Dynamic Documents",
    "section": "",
    "text": "Project Jupyter grew out of the IPython Notebook project and provides a general way of embedding code chunks, using a variety of languages (not just Python), within a document (called a notebook) where the text components of the document is written in Markdown. Basically a document is a sequence of chunks, where each chunk is either a code chunk or a Markdown (text) chunk. The Markdown text can of course include mathematical notation using LaTeX syntax.\nTo work with a Jupyter notebook, you start Jupyter by running jupyter notebook from the UNIX command line. This will open up a Jupyter interface in a browser window. From there, you can navigate to and open your notebook file (which will end in extension .ipynb). You can choose the kernel (i.e., the language for the code chunks – Python, R, etc.) by selecting Kernel -&gt; Change Kernel or by selecting the kernel you want when opening a new notebook. Note that unlike with Quarto, a single file can only use a single kernel, so you can’t mix cells that use different languages.\nYou may have web-based access to Jupyter notebooks via services such as JupyterHub and Open OnDemand (e.g., on the UC Berkeley Savio campus cluster or through the UC Berkeley Statistical Computing Facility or the UC Berkeley DataHub). In that case you logon via a web browser and then start and interact with your notebook in the browser.\nThe Jupyter files have some similarities to demo.qmd and demo-Rmd.Rmd as both Quarto/R Markdown and Jupyter rely on Markdown as the format for text input. However, they handle code chunks somewhat differently.\nYou can insert code chunks in a different language using the %% magic syntax, as shown in demo-python.ipynb. We also have specific demo files for bash and R: demo-bash.ipynb and demo-R.ipynb. All include instructions for generating HTML output.\nYou can convert Jupyter notebooks to Quarto qmd format:\nquarto convert demo-python.ipynb\nThis is nice in part because qmd (like Rmd) is more easily handled by version control and with shell commands than the JSON format of .ipynb files.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "demo.html",
    "href": "demo.html",
    "title": "An example Quarto Markdown file",
    "section": "",
    "text": "From the command line, you can render the file as follows:\n\nquarto render demo.qmd --to html\nquarto render demo.qmd --to pdf\n\n# Output depends on 'format' declaration at the top of the document (defaults to html):\nquarto render demo.qmd  \n\nAlternatively, start R and run the desired line from amongst the following possibilities in R:\n\nlibrary(quarto)\nquarto_render(\"demo.qmd\") # defaults to html\nquarto_render(\"demo.qmd\", output_format = \"pdf\")\n\nOr in RStudio (version at least 2022.07), click on the ‘Render’ button and choose to knit to HTML, PDF, or Word (for R Markdown).\nHere is the rendered PDF version of this document.",
    "crumbs": [
      "Quarto output example"
    ]
  },
  {
    "objectID": "demo.html#latex-macros",
    "href": "demo.html#latex-macros",
    "title": "An example Quarto Markdown file",
    "section": "3.1 LaTeX macros",
    "text": "3.1 LaTeX macros\nYou can define LaTeX macros in separate files and then use them as follows.\nThe macros for PDF rendering should be placed in a .tex file as shown in macros.tex. The macros for HTML rendering should be placed in a .md file, formatted as shown in macros.md.\n(Unfortunately, it does seem to me that you need to have two separate files with the same macro definitions if rendering to both pdf and html.)\nThen make sure to include those files as seen in the header of the qmd document like this:\nformat:\n  pdf:\n    include-before-body:\n     - file: macros.tex\n  html:\n    include-before-body:\n     - file: macros.md\nWe can then use a macro in this equation:\n\\[\nA = X \\trans Y\n\\]",
    "crumbs": [
      "Quarto output example"
    ]
  },
  {
    "objectID": "demo.html#r-code",
    "href": "demo.html#r-code",
    "title": "An example Quarto Markdown file",
    "section": "4.1 R code",
    "text": "4.1 R code\nHere’s an R code chunk\n\na &lt;- c(7, 3)\nmean(a)\n\n[1] 5\n\nb &lt;- a + 3\nmean(b)\n\n[1] 8\n\n\nWhen running R code, output is printed interspersed with the code, as one would generally want. Also, later chunks have access to result from earlier chunks (i.e., state is preserved between chunks).\nLet’s make a plot:\n\nhist(rnorm(20))\n\n\n\n\n\n\n\n\nAnd here’s some inline R code: What is 3 plus 5? 8.",
    "crumbs": [
      "Quarto output example"
    ]
  },
  {
    "objectID": "demo.html#python-code",
    "href": "demo.html#python-code",
    "title": "An example Quarto Markdown file",
    "section": "4.2 Python code",
    "text": "4.2 Python code\nYou can embed Python code. As with R, state is preserved so later chunks can use objects from earlier chunks.\n\nimport numpy as np\nx = np.array((3, 5, 7))\nprint(x.sum())\n\n15\n\nx.min()  \n\n3\n\n\n\ntry:\n    print(\"state is preserved if we see the value of `x[2]` next\")\n    print(x[2])\nexcept NameError:\n    print('state is not preserved: x does not exist')\n\nstate is preserved if we see the value of `x[2]` next\n7\n\n\n\n\n\n\n\n\nFormat of output from Python chunks\n\n\n\nWhen using the jupyter rendering engine, all output is printed after all the code from the chunk. When using knitr engine, output appears directly after the code producing the output, as shown here.\n\nprint(1)\n\n1\n\n# Whether \"1\" and \"2\" are printed after all the code or interspersed\n# depends on the engine used.\nprint(2)\n\n2\n\n\n\n\n\n\n\n\n\n\nWhat output is printed from Python chunks\n\n\n\nBy default, only the output of the last line of Python code and explicit print calls are printed. But you can add ipynb-shell-interactivity: all to the yml header of the Quarto file to have all output printed.\n\n\nThere is no facility for inline Python code, so this: python print(3+5) does not print out “8”.\nTo display code from a file of Python code, you can use functionality in the inspect module. This code would display the definition of doubled() from the my_code module.\n\nimport my_code\nimport inspect\nprint(inspect.getsource(my_code.doubled))\n\ndef doubled(x):\n    return 2*x\n\n\nThis will work for functions and for class definitions.",
    "crumbs": [
      "Quarto output example"
    ]
  },
  {
    "objectID": "demo.html#bash-code",
    "href": "demo.html#bash-code",
    "title": "An example Quarto Markdown file",
    "section": "4.3 bash code",
    "text": "4.3 bash code\nA bash chunk:\n\nls -l assets\ndf -h\ncd /tmp\npwd\n\ntotal 99\ndrwxr-sr-x 2 paciorek scfstaff     3 Feb 25 14:37 css\ndrwxr-sr-x 6 paciorek scfstaff     6 Feb 25 14:37 fonts\ndrwxr-sr-x 2 paciorek scfstaff     3 Feb 25 14:37 img\ndrwxr-sr-x 2 paciorek scfstaff     3 Feb 25 14:37 js\n-rw-r--r-- 1 paciorek scfstaff 92106 Feb 25 14:37 stat_bear.png\n-rw-r--r-- 1 paciorek scfstaff    69 Feb 25 14:37 styles.css\nFilesystem                       Size  Used Avail Use% Mounted on\n/dev/sda2                         59G   32G   25G  57% /\ntmpfs                             16G  142M   16G   1% /dev/shm\ntmpfs                            3.2G  3.4M  3.2G   1% /run\ntmpfs                            5.0M  4.0K  5.0M   1% /run/lock\n/dev/sdb1                        111G  661M  105G   1% /tmp\n/dev/sda1                        499M  6.1M  493M   2% /boot/efi\n/dev/sda3                         59G   47G  9.3G  84% /var\n/dev/sda5                        2.6T  1.3T  1.2T  53% /var/tmp\noz.berkeley.edu:/pool0/accounts   67T   23T   45T  34% /accounts\ntmpfs                            3.2G  132K  3.2G   1% /run/user/3189\noz.berkeley.edu:/pool0/system    6.0T  4.9T  1.2T  81% /system\noz.berkeley.edu:/pool0/scratch    37T   35T  2.5T  94% /scratch\ntmpfs                            3.2G   32K  3.2G   1% /run/user/1463\n/tmp\n\n\nUnfortunately, output from bash chunks occurs after all the code is printed and without any line spacing. Also, state is not preserved between chunks.\nWe can see that state is not preserved here, where the current working directory is NOT the directory that we changed to in the chunk above.\n\npwd  # result would be /tmp if state were preserved \n\n/accounts/vis/paciorek/staff/tutorials/tutorial-dynamic-docs\n\n\nInline bash code won’t work so this: bash wc demo.Rmd has no effect, unlike with R code.\nIf you are using the jupyter engine and want to have both bash and Python chunks in a document, or you don’t want to have to install a bash Jupyter kernel, you can use ipython magic to run bash code within a Python chunk (results not shown here):\n\n!echo \"hello from python\"\n!pwd\n\nOne can also use zsh or other shell chunks, replacing the “bash” label with “zsh” or the other shell.",
    "crumbs": [
      "Quarto output example"
    ]
  },
  {
    "objectID": "demo.html#embedding-julia-code",
    "href": "demo.html#embedding-julia-code",
    "title": "An example Quarto Markdown file",
    "section": "4.4 Embedding Julia code",
    "text": "4.4 Embedding Julia code\nYou can embed Julia code. As with R and Python, state is preserved so later chunks can use objects from earlier chunks.\n\nx = [3, 5, 7];\nx[2]\n\n5\n\n\n\ntry\n    println(\"state is preserved if we see the value of `x[2]` next\")\n    print(x[2])\ncatch\n    print(\"state is not preserved: x does not exist\")\nend\n\nstate is preserved if we see the value of `x[2]` next\n5\n\n\nThere is no facility for inline Julia code, so this code: julia print(3+5) has no effect.",
    "crumbs": [
      "Quarto output example"
    ]
  },
  {
    "objectID": "demo.html#r-code-1",
    "href": "demo.html#r-code-1",
    "title": "An example Quarto Markdown file",
    "section": "7.1 R code",
    "text": "7.1 R code\nHaving long lines be nicely formatted and other aspects of formatting can be a challenge. Also, results can differ depending on your output format (e.g., PDF vs. HTML). In general the code in this section will often overflow the page width in PDF but not in HTML, but even in the HTML the line breaks may be awkwardly positioned.\nHere are some examples that overflow in PDF output.\n\nb &lt;- \"Statistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively\"\n## Statistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively\n\n## This might work to give decent formatting in HTML but doesn't in PDF.\ncat(b, fill = TRUE)\n\nStatistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively\n\nvecWithALongName = rnorm(100)\na = length(mean(5 * vecWithALongName + vecWithALongName - exp(vecWithALongName) + vecWithALongName * vecWithALongName, na.rm = TRUE))\na = length(mean(5 * vecWithALongName + vecWithALongName)) # this is a comment that goes over the line by a good long ways\na = length(mean(5 * vecWithALongName + vecWithALongName - exp(vecWithALongName) + vecWithALongName, na.rm = TRUE)) # this is a comment that goes over the line by a good long long long long long long long long ways\n\nIn contrast, long output is usually fine, even in PDF.\n\nrnorm(30)\n\n [1] -1.04437702  0.51995461  0.15155954  0.55836893 -1.87940055 -0.99908618\n [7] -0.47083913  0.88461719 -2.47235000  1.55333948  1.41114869  1.91056609\n[13] -0.62932679  1.22380063  1.12960580 -0.84659648 -0.65229492  1.83760743\n[19] -1.32678114  0.50964439 -0.80747544 -0.03085863 -0.91200119  0.82473210\n[25]  0.70518136 -0.84725563 -1.07806906  1.38768940  1.11856234  0.24872574\n\n\nAdding the tidy: true chunk option and setting the width as shown below can help with long comment lines or lines of code, but doesn’t help for some of the cases above.\n\n## Long strings and long comments:\n\nb &lt;- \"Statistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively\"\n## Statistics at UC Berkeley: We are a community engaged in research and\n## education in probability and statistics. In addition to developing\n## fundamental theory and methodology, we are actively\n\n## This might work to give decent formatting in HTML but doesn't in PDF:\n\ncat(b, fill = TRUE)\n\nStatistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively\n\n## Now consider long lines of code:\n\nvecWithALongName &lt;- rnorm(100)\na &lt;- length(mean(5 * vecWithALongName + vecWithALongName - exp(vecWithALongName) +\n    vecWithALongName * vecWithALongName, na.rm = TRUE))\na &lt;- length(mean(5 * vecWithALongName + vecWithALongName))  # this is a comment that goes over the line by a good long ways\na &lt;- length(mean(5 * vecWithALongName + vecWithALongName - exp(vecWithALongName) +\n    vecWithALongName, na.rm = TRUE))  # this is a comment that goes over the line by a good long long long long long long long long ways\n\nTo address the problems seen above, sometimes you can format things manually for better results. In that case, you may need to tag the chunk with tidy: false, but I have not done that here.\n\n## Breaking up a string:\n\nb &lt;- \"Statistics at UC Berkeley: We are a community engaged in research\n and education in probability and statistics. In addition to developing \nfundamental theory and methodology, we are actively\"\n\n## Breaking up a comment:\n\n## Statistics at UC Berkeley: We are a community engaged in research and \n## education in probability and statistics. In addition to developing \n## fundamental theory and methodology, we are actively\n\n## Breaking up code lines:\n\nvecWithALongName = rnorm(100)\na &lt;- length(mean(5 * vecWithALongName + vecWithALongName - exp(vecWithALongName) + \n    vecWithALongName * vecWithALongName, na.rm = TRUE))\na &lt;- length(mean(5 * vecWithALongName + vecWithALongName)) # this is a comment that \n    ## goes over the line by a good long ways\na &lt;- length(mean(5 * vecWithALongName + vecWithALongName - exp(vecWithALongName) + \n    vecWithALongName, na.rm = TRUE)) # this is a comment that goes over the line \n    ## by a good long long long long long long long long ways",
    "crumbs": [
      "Quarto output example"
    ]
  },
  {
    "objectID": "demo.html#python-code-1",
    "href": "demo.html#python-code-1",
    "title": "An example Quarto Markdown file",
    "section": "7.2 Python code",
    "text": "7.2 Python code\nIn Python, there is similar trouble with lines overflowing in PDF output too.\n\n# This overflows the page:\n\nb = \"asdl lkjsdf jklsdf kladfj jksfd alkfd klasdf klad kla lakjsdf aljdkfad kljafda kaljdf afdlkja lkajdfsa lajdfa adlfjaf jkladf afdl\"\nprint(b)\n\nasdl lkjsdf jklsdf kladfj jksfd alkfd klasdf klad kla lakjsdf aljdkfad kljafda kaljdf afdlkja lkajdfsa lajdfa adlfjaf jkladf afdl\n\n\n\n# This code overflows the page:\n\nzoo = {\"lion\": \"Simba\", \"panda\": None, \"whale\": \"Moby\", \"numAnimals\": 3, \"bear\": \"Yogi\", \"killer whale\": \"shamu\", \"bunny:\": \"bugs\"}\nprint(zoo)\n\n{'lion': 'Simba', 'panda': None, 'whale': 'Moby', 'numAnimals': 3, 'bear': 'Yogi', 'killer whale': 'shamu', 'bunny:': 'bugs'}\n\n\nTo fix the issue, we can use the frontmatter settings noted at the start of this section, or we can manually break the code into multiple lines. However long output still overflows. One work-around is only to print out portions of an object such that what is printed doesn’t overflow\n\nzoo = {\"lion\": \"Simba\", \"panda\": None, \"whale\": \"Moby\", \n       \"numAnimals\": 3, \"bear\": \"Yogi\", \"killer whale\": \"shamu\", \n       \"bunny:\": \"bugs\"}\nprint(zoo)\n\n{'lion': 'Simba', 'panda': None, 'whale': 'Moby', 'numAnimals': 3, 'bear': 'Yogi', 'killer whale': 'shamu', 'bunny:': 'bugs'}\n\n\nLong comments overflow as well, but you can always manually break into multiple lines.\n\n# asdl lkjsdf jklsdf kladfj jksfd alkfd klasdf klad kla lakjsdf aljdkfad kljafda kaljdf afdlkja lkajdfsa lajdfa adlfjaf jkladf afdl\n\n# asdl lkjsdf jklsdf kladfj jksfd alkfd klasdf klad kla lakjsdf aljdkfad\n# kljafda kaljdf afdlkja lkajdfsa lajdfa adlfjaf jkladf afdl",
    "crumbs": [
      "Quarto output example"
    ]
  },
  {
    "objectID": "demo.html#bash-code-1",
    "href": "demo.html#bash-code-1",
    "title": "An example Quarto Markdown file",
    "section": "7.3 bash code",
    "text": "7.3 bash code\nIn bash, we have similar problems with lines overflowing in PDF output, but bash allows us to use a backslash to break lines of code. However that strategy doesn’t help with long lines of output.\n\necho \"Statistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively\" &gt; tmp.txt\n  \necho \"Second try: Statistics at UC Berkeley: We are a community engaged \\\nin research and education in probability and statistics. In addition to \\\ndeveloping fundamental theory and methodology, we are actively\" \\\n&gt;&gt; tmp.txt\n\ncat tmp.txt\n\nStatistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively\nSecond try: Statistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively\n\n\nWe also have problems with long comments, so we would need to manually format them.\nHere is a long comment line that overflows in PDF:\n\n# asdl lkjsdf jklsdf kladfj jksfd alkfd klasdf klad kla lakjsdf aljdkfad kljafda kaljdf afdlkja lkajdfsa lajdfa adlfjaf jkladf afdl\n\nInstead manually break the comment into multiple lines:\n\n# asdl lkjsdf jklsdf kladfj jksfd alkfd klasdf klad kla \n# lakjsdf aljdkfad kljafda kaljdf afdlkja lkajdfsa lajdfa \n# adlfjaf jkladf afdl",
    "crumbs": [
      "Quarto output example"
    ]
  },
  {
    "objectID": "demo-Rmd.html",
    "href": "demo-Rmd.html",
    "title": "An example R Markdown file",
    "section": "",
    "text": "From within R, you can run the document through the either the rmarkdown or knitr package for R to generate an html file, or through the rmarkdown package to generate PDF or Word (the latter being useful at times but hopefully avoidable).\n\nlibrary(quarto); quarto_render('demo-Rmd.Rmd', 'html')\nlibrary(quarto); quarto_render('demo-Rmd.Rmd', 'pdf')\nlibrary(rmarkdown); render('demo-Rmd.Rmd', 'pdf_document')\nlibrary(rmarkdown); render('demo-Rmd.Rmd', 'html_document')\nlibrary(rmarkdown); render('demo-Rmd.Rmd', 'word_document')\nlibrary(knitr); knit2html('demo-Rmd.Rmd')  \n\nOr in RStudio, click on the ‘Knit’ pull-down menu and choose to knit to HTML, PDF, or Word (for R Markdown) or use the ‘Render’ button in more recent versions of RStudio.\nAlternatively, from the UNIX command line, run one of these:\n\nquarto render demo-Rmd.Rmd --to html  # HTML\nquarto render demo-Rmd.Rmd --to pdf  # pdf\nRscript -e \"library(rmarkdown); render('demo-Rmd.Rmd', 'pdf_document')\"  # PDF\nRscript -e \"library(rmarkdown); render('demo-Rmd.Rmd', 'html_document')\"  # HTML\nRscript -e \"library(rmarkdown); render('demo-Rmd.Rmd', 'word_document')\"  # Word\nRscript -e \"library(knitr); knit2html('demo-Rmd.Rmd')\"  # HTML alternative",
    "crumbs": [
      "R Markdown output example"
    ]
  },
  {
    "objectID": "demo-Rmd.html#bash",
    "href": "demo-Rmd.html#bash",
    "title": "An example R Markdown file",
    "section": "6.1 bash",
    "text": "6.1 bash\nA bash chunk:\n\nls -l assets\ndf -h\ncd /tmp\npwd\n\ntotal 99\ndrwxr-sr-x 2 paciorek scfstaff     3 Feb 25 14:37 css\ndrwxr-sr-x 6 paciorek scfstaff     6 Feb 25 14:37 fonts\ndrwxr-sr-x 2 paciorek scfstaff     3 Feb 25 14:37 img\ndrwxr-sr-x 2 paciorek scfstaff     3 Feb 25 14:37 js\n-rw-r--r-- 1 paciorek scfstaff 92106 Feb 25 14:37 stat_bear.png\n-rw-r--r-- 1 paciorek scfstaff    69 Feb 25 14:37 styles.css\nFilesystem                       Size  Used Avail Use% Mounted on\n/dev/sda2                         59G   32G   25G  57% /\ntmpfs                             16G  142M   16G   1% /dev/shm\ntmpfs                            3.2G  3.4M  3.2G   1% /run\ntmpfs                            5.0M  4.0K  5.0M   1% /run/lock\n/dev/sdb1                        111G  663M  105G   1% /tmp\n/dev/sda1                        499M  6.1M  493M   2% /boot/efi\n/dev/sda3                         59G   47G  9.3G  84% /var\n/dev/sda5                        2.6T  1.3T  1.2T  53% /var/tmp\noz.berkeley.edu:/pool0/accounts   67T   23T   45T  34% /accounts\ntmpfs                            3.2G  132K  3.2G   1% /run/user/3189\noz.berkeley.edu:/pool0/system    6.0T  4.9T  1.2T  81% /system\noz.berkeley.edu:/pool0/scratch    37T   35T  2.5T  94% /scratch\ntmpfs                            3.2G   32K  3.2G   1% /run/user/1463\n/tmp\n\n\nUnfortunately, output from bash chunks occurs after all the code is printed and without any line spacing. Also, state is not preserved between chunks.\nWe can see that state is not preserved here, where the current working directory is NOT the directory that we changed to in the chunk above.\n\npwd  # result would be /tmp if state were preserved \n\n/accounts/vis/paciorek/staff/tutorials/tutorial-dynamic-docs\n\n\nInline bash code won’t work: bash wc demo-Rmd.Rmd, unlike with R code.",
    "crumbs": [
      "R Markdown output example"
    ]
  },
  {
    "objectID": "demo-Rmd.html#embedding-python-code",
    "href": "demo-Rmd.html#embedding-python-code",
    "title": "An example R Markdown file",
    "section": "6.2 Embedding Python code",
    "text": "6.2 Embedding Python code\nYou can embed Python code. As with R, state is preserved so later chunks can use objects from earlier chunks.\n\nimport numpy as np\nx = np.array((3, 5, 7))\nprint(x.sum())\n\n15\n\nx.min()    # this will print with more recent versions of rmarkdown \n\n3\n\n\n\ntry:\n        print(x[0])\nexcept NameError:\n       print('state is not preserved: x does not exist')\n\n3\n\n\nThere is no facility for inline Python code: python print(3+5)",
    "crumbs": [
      "R Markdown output example"
    ]
  },
  {
    "objectID": "demo-Rmd.html#r-code",
    "href": "demo-Rmd.html#r-code",
    "title": "An example R Markdown file",
    "section": "8.1 R code",
    "text": "8.1 R code\nHaving long lines be nicely formatted and other aspects of formatting can be a challenge. Also, results can differ depending on your output format (e.g., PDF vs. HTML). In general the code in this section will often overflow the page width in PDF but not in HTML, but even in the HTML the line breaks may be awkwardly positioned.\nHere are some examples that overflow in PDF output.\n\nb &lt;- \"Statistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively\"\n## Statistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively\n\n## This might work to give decent formatting in HTML but doesn't in PDF.\ncat(b, fill = TRUE)\n\nStatistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively\n\nvecWithALongName = rnorm(100)\na = length(mean(5 * vecWithALongName + vecWithALongName - exp(vecWithALongName) + vecWithALongName * vecWithALongName, na.rm = TRUE))\na = length(mean(5 * vecWithALongName + vecWithALongName)) # this is a comment that goes over the line by a good long ways\na = length(mean(5 * vecWithALongName + vecWithALongName - exp(vecWithALongName) + vecWithALongName, na.rm = TRUE)) # this is a comment that goes over the line by a good long long long long long long long long ways\n\nIn contrast, long output is usually fine, even in PDF.\n\nrnorm(30)\n\n [1]  0.47485053 -0.53300834 -0.69385985 -1.30288852 -1.14076964 -1.04437702\n [7]  0.51995461  0.15155954  0.55836893 -1.87940055 -0.99908618 -0.47083913\n[13]  0.88461719 -2.47235000  1.55333948  1.41114869  1.91056609 -0.62932679\n[19]  1.22380063  1.12960580 -0.84659648 -0.65229492  1.83760743 -1.32678114\n[25]  0.50964439 -0.80747544 -0.03085863 -0.91200119  0.82473210  0.70518136\n\n\nAdding the tidy=TRUE chunk option and setting the width (as shown in the Rmd version of this document) can help with long comment lines or lines of code, but doesn’t help for some of the cases above.\n\n## Long strings and long comments:\n\nb &lt;- \"Statistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively\"\n## Statistics at UC Berkeley: We are a community engaged in research and\n## education in probability and statistics. In addition to developing\n## fundamental theory and methodology, we are actively\n\n## This might work to give decent formatting in HTML but doesn't in PDF:\n\ncat(b, fill = TRUE)\n\nStatistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively\n\n## Now consider long lines of code:\n\nvecWithALongName &lt;- rnorm(100)\na &lt;- length(mean(5 * vecWithALongName + vecWithALongName - exp(vecWithALongName) +\n    vecWithALongName * vecWithALongName, na.rm = TRUE))\na &lt;- length(mean(5 * vecWithALongName + vecWithALongName))  # this is a comment that goes over the line by a good long ways\na &lt;- length(mean(5 * vecWithALongName + vecWithALongName - exp(vecWithALongName) +\n    vecWithALongName, na.rm = TRUE))  # this is a comment that goes over the line by a good long long long long long long long long ways\n\nTo address the problems seen above, sometimes you can format things manually for better results. You may need to tag the chunk with tidy=FALSE, but I have not done that here.\n\n## Breaking up a string:\n\nb &lt;- \"Statistics at UC Berkeley: We are a community engaged in research\n and education in probability and statistics. In addition to developing \nfundamental theory and methodology, we are actively\"\n\n## Breaking up a comment:\n\n## Statistics at UC Berkeley: We are a community engaged in research and \n## education in probability and statistics. In addition to developing \n## fundamental theory and methodology, we are actively\n\n## Breaking up code lines:\n\nvecWithALongName = rnorm(100)\na &lt;- length(mean(5 * vecWithALongName + vecWithALongName - exp(vecWithALongName) + \n    vecWithALongName * vecWithALongName, na.rm = TRUE))\na &lt;- length(mean(5 * vecWithALongName + vecWithALongName)) # this is a comment that \n    ## goes over the line by a good long ways\na &lt;- length(mean(5 * vecWithALongName + vecWithALongName - exp(vecWithALongName) + \n    vecWithALongName, na.rm = TRUE)) # this is a comment that goes over the line \n    ## by a good long long long long long long long long ways",
    "crumbs": [
      "R Markdown output example"
    ]
  },
  {
    "objectID": "demo-Rmd.html#bash-code",
    "href": "demo-Rmd.html#bash-code",
    "title": "An example R Markdown file",
    "section": "8.2 bash code",
    "text": "8.2 bash code\nIn bash, we have similar problems with lines overflowing in PDF output, but bash allows us to use a backslash to break lines of code. However that strategy doesn’t help with long lines of output.\n\necho \"Statistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively\" &gt; tmp.txt\n  \necho \"Second try: Statistics at UC Berkeley: We are a community engaged \\\nin research and education in probability and statistics. In addition to \\\ndeveloping fundamental theory and methodology, we are actively\" \\\n&gt;&gt; tmp.txt\n\ncat tmp.txt\n\nStatistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively\nSecond try: Statistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively\n\n\nWe also have problems with long comments, so we would need to manually format them.\nHere is a long comment line that overflows in PDF:\n\n# asdl lkjsdf jklsdf kladfj jksfd alkfd klasdf klad kla lakjsdf aljdkfad kljafda kaljdf afdlkja lkajdfsa lajdfa adlfjaf jkladf afdl\n\nInstead manually break the comment into multiple lines:\n\n# asdl lkjsdf jklsdf kladfj jksfd alkfd klasdf klad kla \n# lakjsdf aljdkfad kljafda kaljdf afdlkja lkajdfsa lajdfa \n# adlfjaf jkladf afdl",
    "crumbs": [
      "R Markdown output example"
    ]
  },
  {
    "objectID": "demo-Rmd.html#python-code",
    "href": "demo-Rmd.html#python-code",
    "title": "An example R Markdown file",
    "section": "8.3 Python code",
    "text": "8.3 Python code\nIn Python, there is similar trouble with lines overflowing in PDF output too.\n\n# This overflows the page:\n\nb = \"asdl lkjsdf jklsdf kladfj jksfd alkfd klasdf klad kla lakjsdf aljdkfad kljafda kaljdf afdlkja lkajdfsa lajdfa adlfjaf jkladf afdl\"\nprint(b)\n\nasdl lkjsdf jklsdf kladfj jksfd alkfd klasdf klad kla lakjsdf aljdkfad kljafda kaljdf afdlkja lkajdfsa lajdfa adlfjaf jkladf afdl\n\n\n\n# This code overflows the page:\n\nzoo = {\"lion\": \"Simba\", \"panda\": None, \"whale\": \"Moby\", \"numAnimals\": 3, \"bear\": \"Yogi\", \"killer whale\": \"shamu\", \"bunny:\": \"bugs\"}\nprint(zoo)\n\n{'lion': 'Simba', 'panda': None, 'whale': 'Moby', 'numAnimals': 3, 'bear': 'Yogi', 'killer whale': 'shamu', 'bunny:': 'bugs'}\n\n\nTo fix the issue, we can manually break the code into multiple lines, but long output still overflows.\n\nzoo = {\"lion\": \"Simba\", \"panda\": None, \"whale\": \"Moby\", \n       \"numAnimals\": 3, \"bear\": \"Yogi\", \"killer whale\": \"shamu\", \n       \"bunny:\": \"bugs\"}\nprint(zoo)\n\n{'lion': 'Simba', 'panda': None, 'whale': 'Moby', 'numAnimals': 3, 'bear': 'Yogi', 'killer whale': 'shamu', 'bunny:': 'bugs'}\n\n\nLong comments overflow as well, but you can always manually break into multiple lines.\n\n# asdl lkjsdf jklsdf kladfj jksfd alkfd klasdf klad kla lakjsdf aljdkfad kljafda kaljdf afdlkja lkajdfsa lajdfa adlfjaf jkladf afdl\n\n# asdl lkjsdf jklsdf kladfj jksfd alkfd klasdf klad kla lakjsdf aljdkfad\n# kljafda kaljdf afdlkja lkajdfsa lajdfa adlfjaf jkladf afdl",
    "crumbs": [
      "R Markdown output example"
    ]
  },
  {
    "objectID": "python-in-RStudio.html",
    "href": "python-in-RStudio.html",
    "title": "Notes on using Python within RStudio",
    "section": "",
    "text": "Notes on using Python within RStudio\nIn addition to basic use of Python chunks in R Markdown documents, RStudio has developed the reticulate package, which greatly enhances the ability to use both R and Python in a single workflow.\nRmd documents with Python chunks can be rendered to an output file by ‘knitting’ the document using the Knit button (which invokes rmarkdown::render) or by invoking rmarkdown::render yourself.\n\nWith the notebook (inline output) functionality turned off\nIf you run a Python chunk from an R Markdown document in RStudio it will run the code in a Python process and show the result in the Console window.\nIn fact it will invoke reticulate::repl_python to give you a “read-eval-print loop” (REPL) interpreter interface to Python in the console. If you want, you can enter Python code directly in the console. In addition, execution of subsequent Python code chunks can use objects from earlier chunks. To exit from the Python REPL to return to the R REPL, you can either type exit at the Python prompt or simply execute an R chunk.\n\n\nWith the notebook (inline output) functionality turned on\nIn the RStudio Global Tools options, under R Markdown, you can select Show output inline for all R Markdown documents. This causes the output from Python chunks (as well as chunks in other languages) to show up in the editor window (i.e., notebook style) rather than in the console.\n\n\nReticulate and working in both R and Python\nreticulate allows you to work on objects in both R and Python, moving seamlessly between the two languages. Lots more detail in the reticulate documentation and online.\n\nlibrary(reticulate)\ndevs &lt;- rnorm(5)\n\n\n## access the R object in Python code\nr.devs[0]\n\n-0.6388592407278578\n\n\npyvals = {\"a\": 0, \"b\": 1}\n\n\n## access the Python object in R code\npy$pyvals['a']\n\n$a\n[1] 0\n\n\nThere’s lots more functionality. That’s just a teaser of the cool things you can do.",
    "crumbs": [
      "Python chunks in RStudio"
    ]
  }
]