\documentclass{article}
\usepackage{natbib}
\usepackage[unicode=true]{hyperref}
\usepackage{geometry}
\geometry{tmargin=1in,bmargin=1in,lmargin=1in,rmargin=1in}

<<setup, include=FALSE>>=
# include any code here you don't want to show up in the document,
# e.g., package and dataset loading

require(ggplot2)
set.seed(1)

# also a good place to set global chunk options

library(knitr) # need this for opts_chunk command
opts_chunk$set(fig.width = 5, fig.height = 5)
# if we wanted chunks by default not to be evaluated
# opts_chunk$set(eval = FALSE)  
myControlVar <- TRUE   # used later to control chunk behavior
@ 


\begin{document} 
\title{An example Rnw (Sweave format) file\\Illustrating use of R, bash, and Python code chunks}
\author{Christopher Paciorek}
\date{February 2022}

\maketitle

\section{How to generate a document from this file}

In bash, you can run this document through the \emph{knitr} package for R to generate a PDF. 

<<compile-bash, eval=FALSE, engine='bash'>>=
Rscript -e "library(knitr); knit2pdf('demo.Rnw')"  
@ 

Alternatively, start R and run this:

<<compile-R, eval=FALSE>>=
library(knitr); knit2pdf('demo.Rnw')  
@ 

I don't know of a way to generate HTML directly, but there are tools for converting between various file formats, such as \emph{pandoc}.

Or in RStudio, simply click the 'Compile PDF' button. Important: make sure that RStudio knows to use knitr rather than Sweave to compile your document. Click on Preferences in the RStudio drop-down menu, select 'Sweave' and then choose 'knitr' after 'Weave Rnw files using'. If you choose 'Sweave' you may find the line \begin{verbatim}\SweaveOpts{concordance=TRUE}\end{verbatim} inserted in your document and resulting problems with generating the pdf may ensue.

\section{LaTeX}

This document will focus on embedding code and not on standard LaTeX. For a quick introduction to LaTeX, see \href{https://github.com/berkeley-scf/tutorial-latex-intro}{our LaTeX tutorial}.

The \texttt{knit2pdf} command processes the Rnw format, evaluating the R code chunks, and creating a standard LaTeX file with the code snippets and results of evaluating the code properly formatted as standard LaTeX. 

\section{Embedding equations using LaTeX}

The Sweave format is built on LaTeX, so you can just use LaTeX functionality directly.

Here is an inline equation $f(x) = \int f(y, x) dy$.

Here's a displayed equation
$$
f_\theta(x) = \int f_\theta(y, x) dy.
$$ 


\section{Embedding R code}

Here's an R code chunk

<<r-chunk1>>=
a <- c(7, 3)
mean(a)
b <- a + 3
mean(b)
@
\noindent Unfortunately, we need to use the \emph{noindent} command to prevent the text after a chunk from being considered as a new paragraph. Here's another chunk: 

<<r-chunk2>>=
mean(b)
@

When running R code, output is printed interspersed with the code, as one would generally want. Also, later chunks have access to result from earlier chunks (i.e., state is preserved between chunks). 

Let's make a plot:
<<r-plot, fig.height = 3>>=
hist(rnorm(20))
@

And here's some inline R code: What is 3 plus 5? \Sexpr{3+5}.

You have control over whether code in chunks is echoed into the document and evaluated using the \emph{include}, \emph{echo}, and \emph{eval} tags.

<<includeChunk, include=FALSE>>=
cat("This code is evaluated, but nothing is printed in the document.")
library(fields) 
# fields package should now be loaded for use by later chunks
@

<<echoChunk, echo=FALSE>>=
cat("This code is not printed in the document, but results of evaluating the code are printed.")
@

<<evalChunk, eval=FALSE>>=
cat("this code is not evaluated, but the code itself is printed in the document.")
@

Intensive calculations can be saved using the \texttt{cache=TRUE} tag so they don't need to be rerun every time you compile the document. 

<<slow-step, cache=TRUE>>=
a <- mean(rnorm(5e7))
a
@

You can use R variables to control the chunk options. Note that the variable \emph{myControlVar} is defined in the first chunk of this document.

<<use-var-in-chunk-option, echo=myControlVar, eval=!myControlVar>>=
print("hi")
@ 

\section{Embedding bash and Python code}
 
\subsection{bash}
A bash chunk:
<<bash-chunk1, engine='bash'>>=
ls -l
df -h
cd /tmp
pwd
@

Unfortunately, output from bash chunks occurs after all the code is printed. Also, state is not preserved between chunks.

We can see that state is not preserved here, where the current working directory is NOT the directory that we changed to in the chunk above.

<<bash-chunk2, engine='bash'>>=
pwd  # result would be /tmp if state were preserved
@

Inline bash code won't work.

\subsection{Embedding Python code}

You can embed Python code. As with R, state is preserved so later chunks can use objects from earlier chunks. 

<<py-chunk1, engine='python'>>=
import numpy as np
x = np.array((3, 5, 7))
x.sum()
x.min() 
@

<<py-chunk2, engine='python'>>=
try:
       x[0]
except NameError:
       print('x does not exist')
@

There is no facility for inline Python code evaluation.

\section{Reading code from an external file}

It's sometimes nice to draw code in from a separate file. Before invoking a chunk, we need to read the chunks from the source file. Note that a good place for reading the source file via \texttt{read\_chunk()} is in an initial setup chunk at the beginning of the document.

<<read-chunk, echo=FALSE>>=
library(knitr)
read_chunk('demo.R')
@

<<external_chunk_1>>=
@

<<external_chunk_2>>=
@

\section{Formatting of long lines of code and of output}

\subsection{R code}

Having long lines be nicely formatted and other aspects of formatting can be a challenge. Also, results can differ depending on your output format (e.g., PDF vs. HTML). In general the code in this section will often overflow the page width in PDF but not in HTML, but even in the HTML the line breaks may be awkwardly positioned.

Here are some examples that overflow in PDF output.

<<r-long>>=
b <- "Statistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively"
## Statistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively

## This should work to give decent formatting in HTML but doesn't in PDF.
cat(b, fill = TRUE)

vecWithALongName <- rnorm(100)
a <- length(mean(5 * vecWithALongName + vecWithALongName - exp(vecWithALongName) + vecWithALongName * vecWithALongName, na.rm = TRUE))
a <- length(mean(5 * vecWithALongName + vecWithALongName)) # this is a comment that goes over the line by a good long ways
a <- length(mean(5 * vecWithALongName + vecWithALongName - exp(vecWithALongName) + vecWithALongName, na.rm = TRUE)) # this is a comment that goes over the line by a good long long long long long long long long ways
@


In contrast, long output is usually fine, even in PDF.

<<r-long-output>>=
rnorm(30)
@


Adding the `tidy=TRUE` chunk option and setting the width (as shown in the Rmd version of this document) can help with long comment lines or lines of code, but doesn't help for some of the cases above.

<<r-long-tidy, tidy=TRUE, tidy.opts=list(width.cutoff=80)>>=
## Long strings and long comments:

b <- "Statistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively"
## Statistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively

## This should work to give decent formatting in HTML but doesn't in PDF:

cat(b, fill = TRUE)

## Now consider long lines of code:

vecWithALongName <- rnorm(100)
a <- length(mean(5 * vecWithALongName + vecWithALongName - exp(vecWithALongName) + vecWithALongName * vecWithALongName, na.rm = TRUE))
a <- length(mean(5 * vecWithALongName + vecWithALongName)) # this is a comment that goes over the line by a good long ways
a <- length(mean(5 * vecWithALongName + vecWithALongName - exp(vecWithALongName) + vecWithALongName, na.rm = TRUE)) # this is a comment that goes over the line by a good long long long long long long long long ways
@


To address the problems seen above, sometimes you can format things manually for better results. You may need to tag the chunk with `tidy=FALSE`, but I have not done that here.

<<<r-long-manual>>=
## Breaking up a string:

b <- "Statistics at UC Berkeley: We are a community engaged in research
 and education in probability and statistics. In addition to developing 
fundamental theory and methodology, we are actively"

## Breaking up a comment:

## Statistics at UC Berkeley: We are a community engaged in research and 
## education in probability and statistics. In addition to developing 
## fundamental theory and methodology, we are actively

## Breaking up code lines:

vecWithALongName = rnorm(100)
a <- length(mean(5 * vecWithALongName + vecWithALongName - exp(vecWithALongName) + 
    vecWithALongName * vecWithALongName, na.rm = TRUE))
a <- length(mean(5 * vecWithALongName + vecWithALongName)) # this is a comment that 
    ## goes over the line by a good long ways
a <- length(mean(5 * vecWithALongName + vecWithALongName - exp(vecWithALongName) + 
    vecWithALongName, na.rm = TRUE)) # this is a comment that goes over the line 
    ## by a good long long long long long long long long ways
@


\subsection{bash code}

In bash, we have similar problems with lines overflowing in PDF output, but bash allows us to use a backslash to break lines of code. However that strategy doesn't help with long lines of output. 

<<bash1, engine='bash'>>=
echo "Statistics at UC Berkeley: We are a community engaged in research and education in probability and statistics. In addition to developing fundamental theory and methodology, we are actively" > tmp.txt
  
echo "Second try: Statistics at UC Berkeley: We are a community engaged \
in research and education in probability and statistics. In addition to \
developing fundamental theory and methodology, we are actively" \
>> tmp.txt

cat tmp.txt
@

We also have problems with long comments, so we would need to manually format them.
Here is a long comment line that overflows in PDF:

<<bash2, engine='bash'>>=
# The following long comment line is not broken in my test:
# asdl lkjsdf jklsdf kladfj jksfd alkfd klasdf klad kla lakjsdf aljdkfad kljafda kaljdf afdlkja lkajdfsa lajdfa adlfjaf jkladf afdl
@

Instead manually break the comment into multiple lines:

<<bash2-manual, engine='bash'>>=
# asdl lkjsdf jklsdf kladfj jksfd alkfd klasdf klad kla 
# lakjsdf aljdkfad kljafda kaljdf afdlkja lkajdfsa lajdfa 
# adlfjaf jkladf afdl
@

\subsection{Python code}

In Python, there is similar trouble with lines overflowing in PDF output too.

<<test-python, engine='python'>>=
# This overflows the page:
b = "asdl lkjsdf jklsdf kladfj jksfd alkfd klasdf klad kla lakjsdf aljdkfad kljafda kaljdf afdlkja lkajdfsa lajdfa adlfjaf jkladf afdl"
print(b)

# This code overflows the page:
zoo = {"lion": "Simba", "panda": None, "whale": "Moby", "numAnimals": 3, "bear": "Yogi", "killer whale": "shamu", "bunny:": "bugs"}
print(zoo)
@


To fix the issue, we can manually break the code into multiple lines, but long
output still overflows.

<<test-python-manual, engine='python'>>=
zoo = {"lion": "Simba", "panda": None, "whale": "Moby", 
       "numAnimals": 3, "bear": "Yogi", "killer whale": "shamu", 
       "bunny:": "bugs"}
print(zoo)
@

Long comments overflow as well, but you can always manually break into multiple lines.

<<test-python-manual2, engine='python'>>=
# asdl lkjsdf jklsdf kladfj jksfd alkfd klasdf klad kla lakjsdf aljdkfad kljafda kaljdf afdlkja lkajdfsa lajdfa adlfjaf jkladf afdl

# asdl lkjsdf jklsdf kladfj jksfd alkfd klasdf klad kla lakjsdf aljdkfad
# kljafda kaljdf afdlkja lkajdfsa lajdfa adlfjaf jkladf afdl
@



\section{References}

Here's how to use BibTeX style references.  \cite{Bane:etal:2008} proposed a useful method. This was confirmed \citep{Cres:Joha:2008}.

Note the use of the bibliography keyword below to indicate the \emph{refs.bib} file as the source of the bibliographic information for the references above.

The list of references is placed at the end of the document. 


\bibliographystyle{plainnat}
\bibliography{refs}

\end{document}
